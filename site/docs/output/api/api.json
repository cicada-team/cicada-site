{"apperance":"{\"title\":\"apperance\",\"description\":\"基础教程\",\"author\":\"imink\",\"group\":\"CORE\",\"index\":[0,999],\"url\":\"apperance\",\"toc\":[{\"id\":\"createappearance-statetree-externalprops\",\"value\":\"createAppearance(stateTree, externalProps = {})\"}],\"content\":\"<h2 id=\\\"createappearance-statetree-externalprops\\\">createAppearance(stateTree, externalProps = {})</h2>\\n<p>Appearcance 专门用来处理组件的样式问题，比如显隐样式，以及加入用户自定义的属性。</p>\\n<h3 id=\\\"can1-shu4-props\\\">参数/props</h3>\\n<h4 id=\\\"statetree-sheng1-ming2-de-zhuang4-tai4-shu4-dui4-xiang4\\\">stateTree - 声明的状态树对象</h4>\\n<h4 id=\\\"externalprops-wai4-bu4-shu3-xing4-dui4-xiang4\\\">externalProps - 外部属性对象</h4>\\n<h3 id=\\\"fan3-hui2-zhi2\\\">返回值</h3>\\n<p>\\b返回一个 appearance 对象，提供如下的方法</p>\\n<h4 id=\\\"register-zhu4-ce4-fang1-fa3\\\">register() - 注册方法</h4>\\n<h4 id=\\\"isvisiblebyid-huo4-qu3-zu3-jian4-de-xian3-yin3-zhuang4-tai4\\\">isVisibleById() - 获取组件的显隐状态</h4>\\n<h4 id=\\\"setvisiblebyid-she4-zhi4-zu3-jian4-de-xian3-yin3-zhuang4-tai4\\\">setVisibleById() - 设置组件的显隐状态</h4>\\n<h4 id=\\\"replacechildrenbyid-yong4-lai2-ti4-huan4-zu3-jian4-de-zi3-zu3-jian4\\\">replaceChildrenById() - 用来替换组件的\\b子组件</h4>\\n<h4 id=\\\"subscribe-quan2-ju2-de-zu3-jian4-xiao1-xi1-ding4-yue4\\\">subscribe() - 全局的组件\\b消息订阅</h4>\\n<h4 id=\\\"subscribebyid-jing1-que4-de-zu3-jian4-xiao1-xi1-ding4-yue4\\\">subscribeById() - 精确的组件消息订阅</h4>\\n<h4 id=\\\"mergestylebyid-ju2-bu4-geng1-xin1-zu3-jian4-yang4-shi4\\\">mergeStyleById() - 局部更新组件样式</h4>\\n<h3 id=\\\"yong4-fa3\\\">用法</h3>\\n<pre class=\\\"hljs\\\"><code><span class=\\\"hljs-comment\\\">// 声明</span>\\n<span class=\\\"hljs-keyword\\\">const</span> appearance = createAppearance()\\n</code></pre>\\n\"}","connect":"{\"title\":\"connect\",\"description\":\"基础教程\",\"author\":\"imink\",\"group\":\"CORE\",\"index\":[0,1],\"url\":\"connect\",\"toc\":[{\"id\":\"connect-declarativecomponent-displayname\",\"value\":\"connect(declarativeComponent, displayName)\"}],\"content\":\"<h2 id=\\\"connect-declarativecomponent-displayname\\\">connect(declarativeComponent, displayName)</h2>\\n<p>\\bconnect 用于封装 React Lego 组件，主要完成了3件事情</p>\\n<ol>\\n<li>处理组件的数据。包括首次 render 时把数据注册到 stateTree 中，收到变化时从 stateTree 上取数据传给组件</li>\\n<li>处理组件的交互行为。包括包装 listener，intercepter 等。其中比较重要的是包装过成中还要考虑到组件的受控态和非受控态。在受控状态下修改数据的部分被包装成一个一个 changeFn ，留给外部调用。这个机制在复合组件中用到了</li>\\n<li>和 Render 一起，提供了 Background 机制。将 Background 作为注入参数供用户使用。</li>\\n</ol>\\n<h3 id=\\\"can1-shu4-props\\\">参数/props</h3>\\n<h4 id=\\\"declarativecomponent-react-lego-zu3-jian4-zu3-jian4-ben3-shen1-fan3-hui2-duo1-ge4-fang1-fa3-he2-shu3-xing4-ti2-gong1-connect-feng1-zhuang1-he2-li4-yong4\\\">declarativeComponent React Lego 组件，组件本身\\b返回多个方法和属性提供 connect 封装和利用</h4>\\n<h4 id=\\\"dispalyname-string-zu3-jian4-ming2-cheng1\\\">dispalyName string 组件名称</h4>\\n<h3 id=\\\"fan3-hui2-zhi2\\\">返回值</h3>\\n<p>返回一个经过 connect() 封装后的组件</p>\\n<h3 id=\\\"yong4-fa3\\\">用法</h3>\\n<pre class=\\\"hljs\\\"><code><span class=\\\"hljs-keyword\\\">import</span> * <span class=\\\"hljs-keyword\\\">as</span> Input <span class=\\\"hljs-keyword\\\">from</span> <span class=\\\"hljs-string\\\">'./Input'</span>\\n<span class=\\\"hljs-keyword\\\">import</span> * <span class=\\\"hljs-keyword\\\">as</span> Checkbox <span class=\\\"hljs-keyword\\\">from</span> <span class=\\\"hljs-string\\\">'./Checkbox'</span>\\n<span class=\\\"hljs-keyword\\\">import</span> * <span class=\\\"hljs-keyword\\\">as</span> Repeat <span class=\\\"hljs-keyword\\\">from</span> <span class=\\\"hljs-string\\\">'./Repeat'</span>\\n<span class=\\\"hljs-keyword\\\">import</span> * <span class=\\\"hljs-keyword\\\">as</span> Button <span class=\\\"hljs-keyword\\\">from</span> <span class=\\\"hljs-string\\\">'./Button'</span>\\n<span class=\\\"hljs-keyword\\\">import</span> * <span class=\\\"hljs-keyword\\\">as</span> Box <span class=\\\"hljs-keyword\\\">from</span> <span class=\\\"hljs-string\\\">'./Box'</span>\\n\\n<span class=\\\"hljs-comment\\\">// mapValue 用来循环遍历 React Lego 规范的组件，返回经过 connect 过的组件集合</span>\\n<span class=\\\"hljs-keyword\\\">const</span> components = mapValues({ Input, Checkbox, Repeat, Button, Box }, connect)\\n\\n</code></pre>\\n\"}","dynamicrender":"{\"title\":\"dynamicRender\",\"description\":\"基础教程\",\"author\":\"imink\",\"group\":\"CORE\",\"index\":[0,999],\"url\":\"dynamicrender\",\"toc\":[{\"id\":\"createdynamicrender-args\",\"value\":\"createDynamicRender(…args)\"}],\"content\":\"<h2 id=\\\"createdynamicrender-args\\\">createDynamicRender(…args)</h2>\\n<p>\\b\\n有些情况下，\\b组件是需要动态生成的（无法在页面访问前定义），比如用户点击一个按钮触发一个\\b模态框生成。createDynamicRender 可以通过用户定义的 config 配置文件来动态生成组件</p>\\n<h3 id=\\\"can1-shu4-props\\\">参数/props</h3>\\n<p><code>..args</code> 包括</p>\\n<h4 id=\\\"createstatetree-statetree-shi2-li4\\\">createStateTree - stateTree 实例</h4>\\n<h4 id=\\\"createappearance-appearance-shi2-li4\\\">createAppearance - \\bAppearance 实例</h4>\\n<h4 id=\\\"createbackground-background-rong2-qi4-shi2-li4\\\">createBackground - Background 容器实例</h4>\\n<h4 id=\\\"backgrounddef-background-cha1-jian4-ji2-he2\\\">backgroundDef - Background 插件集合</h4>\\n<h3 id=\\\"fan3-hui2-zhi2\\\">返回值</h3>\\n<p>返回一个具有 Render 方法的组件，\\b与传统 React Lego 组件不同，该组件支持渲染 config 配置的子组件。通过添加属性 config，我们可以动态生成任意组件。</p>\\n<h3 id=\\\"yong4-fa3\\\">用法</h3>\\n<pre class=\\\"hljs\\\"><code><span class=\\\"hljs-keyword\\\">import</span> createDynamicRender <span class=\\\"hljs-keyword\\\">from</span> <span class=\\\"hljs-string\\\">'@cicada/render/lib/createDynamicRender'</span>\\n<span class=\\\"hljs-keyword\\\">import</span> connect <span class=\\\"hljs-keyword\\\">from</span> <span class=\\\"hljs-string\\\">'@cicada/render/lib/connect'</span>\\n\\n<span class=\\\"hljs-keyword\\\">const</span> DynamicRender = connect(createDynamicRender(\\n  applyStateTreeSubscriber(createStateTree),\\n  createAppearance,\\n  createBackground,\\n  backgroundDef,\\n), <span class=\\\"hljs-string\\\">'DynamicRender'</span>)\\n</code></pre>\\n\"}","convertfragment":"{\"title\":\"convertFragment\",\"description\":\"基础教程\",\"author\":\"imink\",\"group\":\"CORE\",\"index\":[0,999],\"url\":\"convertfragment\",\"toc\":[{\"id\":\"convertfragment-fragment-args\",\"value\":\"convertFragment(fragment, …args)\"}],\"content\":\"<h2 id=\\\"convertfragment-fragment-args\\\">convertFragment(fragment, …args)</h2>\\n<p>用于将用户自定义的 config 对象转化成 Cicada 组件, 即复合组件</p>\\n<h3 id=\\\"can1-shu4-props\\\">参数/props</h3>\\n<h4 id=\\\"fragment-yong4-hu4-zi4-ding4-yi4-de-config-dui4-xiang4\\\">fragment - 用户自定义的 config 对象</h4>\\n<p><code>...args</code> 包括</p>\\n<h4 id=\\\"createstatetree\\\">createStateTree</h4>\\n<h4 id=\\\"createappearance\\\">createAppearance</h4>\\n<h4 id=\\\"createbackground\\\">createBackground</h4>\\n<h4 id=\\\"backgrounddef\\\">backgroundDef</h4>\\n<h4 id=\\\"components\\\">components</h4>\\n<h3 id=\\\"fan3-hui2-zhi2\\\">返回值</h3>\\n<p>返回一个符合 React Lego 规范的组件</p>\\n<h3 id=\\\"yong4-fa3\\\">用法</h3>\\n<pre class=\\\"hljs\\\"><code>\\n<span class=\\\"hljs-keyword\\\">const</span> fragments = {\\n  <span class=\\\"hljs-attr\\\">FullName</span>: {\\n    <span class=\\\"hljs-attr\\\">linkState</span>: {\\n      <span class=\\\"hljs-attr\\\">name</span>: {\\n        <span class=\\\"hljs-keyword\\\">from</span>({ stateTree }) {\\n          <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-string\\\">`<span class=\\\"hljs-subst\\\">${stateTree.get(<span class=\\\"hljs-string\\\">'first.value'</span>, <span class=\\\"hljs-string\\\">''</span>)}</span>-<span class=\\\"hljs-subst\\\">${stateTree.get(<span class=\\\"hljs-string\\\">'second.value'</span>, <span class=\\\"hljs-string\\\">''</span>)}</span>`</span>\\n        },\\n        to({ value, stateTree }) {\\n          <span class=\\\"hljs-keyword\\\">const</span> [firstValue, secondValue] = value.split(<span class=\\\"hljs-string\\\">'-'</span>)\\n          stateTree.merge(<span class=\\\"hljs-string\\\">'first'</span>, { <span class=\\\"hljs-attr\\\">value</span>: firstValue })\\n          stateTree.merge(<span class=\\\"hljs-string\\\">'second'</span>, { <span class=\\\"hljs-attr\\\">value</span>: secondValue })\\n        },\\n        <span class=\\\"hljs-attr\\\">stateType</span>: <span class=\\\"hljs-string\\\">'string'</span>,\\n        <span class=\\\"hljs-attr\\\">defaultValue</span>: <span class=\\\"hljs-string\\\">'Jane-Doe'</span>,\\n      },\\n    },\\n    <span class=\\\"hljs-attr\\\">exposeListener</span>: {\\n      <span class=\\\"hljs-attr\\\">onFirstNameChange</span>: {\\n        <span class=\\\"hljs-attr\\\">source</span>: <span class=\\\"hljs-string\\\">'children.0'</span>,\\n        <span class=\\\"hljs-attr\\\">listener</span>: <span class=\\\"hljs-string\\\">'onChange'</span>,\\n      },\\n    },\\n    didMount() {\\n      <span class=\\\"hljs-built_in\\\">console</span>.log(<span class=\\\"hljs-string\\\">'component did mount'</span>)\\n    },\\n    <span class=\\\"hljs-attr\\\">getInitialState</span>: <span class=\\\"hljs-function\\\"><span class=\\\"hljs-params\\\">()</span> =&gt;</span> ({\\n      <span class=\\\"hljs-attr\\\">first</span>: {\\n        <span class=\\\"hljs-attr\\\">value</span>: <span class=\\\"hljs-string\\\">'defaultFirst'</span>,\\n      },\\n      <span class=\\\"hljs-attr\\\">second</span>: {\\n        <span class=\\\"hljs-attr\\\">value</span>: <span class=\\\"hljs-string\\\">'defaultSecond'</span>,\\n      },\\n    }),\\n    <span class=\\\"hljs-attr\\\">config</span>: {\\n      <span class=\\\"hljs-attr\\\">children</span>: [{\\n        <span class=\\\"hljs-attr\\\">type</span>: <span class=\\\"hljs-string\\\">'Input'</span>,\\n        <span class=\\\"hljs-attr\\\">bind</span>: <span class=\\\"hljs-string\\\">'first'</span>,\\n        <span class=\\\"hljs-attr\\\">getInitialState</span>: <span class=\\\"hljs-function\\\"><span class=\\\"hljs-params\\\">()</span> =&gt;</span> ({\\n          <span class=\\\"hljs-attr\\\">label</span>: <span class=\\\"hljs-string\\\">'first name'</span>,\\n        }),\\n      }, {\\n        <span class=\\\"hljs-attr\\\">type</span>: <span class=\\\"hljs-string\\\">'Input'</span>,\\n        <span class=\\\"hljs-attr\\\">bind</span>: <span class=\\\"hljs-string\\\">'second'</span>,\\n        <span class=\\\"hljs-attr\\\">getInitialState</span>: <span class=\\\"hljs-function\\\"><span class=\\\"hljs-params\\\">()</span> =&gt;</span> ({\\n          <span class=\\\"hljs-attr\\\">label</span>: <span class=\\\"hljs-string\\\">'second name'</span>,\\n        }),\\n      }],\\n    },\\n  },\\n}\\n\\n<span class=\\\"hljs-keyword\\\">const</span> fragmentComponents = mapValues(fragments,\\n  (fragment, name) =&gt; connect(\\n    convertFragment(\\n      fragment,\\n      applyStateTreeSubscriber(createStateTree),\\n      createAppearance,\\n      createBackground,\\n      backgroundDef,\\n    ), name,\\n  ),\\n)\\n</code></pre>\\n<p>更多参见 /pages/fragment/index.js</p>\\n\"}","render":"{\"title\":\"render\",\"description\":\"基础教程\",\"author\":\"imink\",\"group\":\"CORE\",\"index\":[0,0],\"url\":\"render\",\"toc\":[{\"id\":\"render\",\"value\":\"Render\"}],\"content\":\"<h2 id=\\\"render\\\">Render</h2>\\n<p>Render 是整个金蝉渲染的根节点组件。内部机制和 Redux Provider 差不多，在 context\\n提供了 stateTree 等&quot;全局数据&quot;。它有两种使用方式:</p>\\n<ol>\\n<li>接受 object 形式的 config。例如: <code>&lt;Render components={{}} config={{}} stateTree={{}} /&gt;</code></li>\\n<li>传统的手动组件的方式。例如:</li>\\n</ol>\\n<pre class=\\\"hljs\\\"><code>  &lt;Render&gt;\\n    <span class=\\\"xml\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">Button</span> <span class=\\\"hljs-attr\\\">bind</span>=<span class=\\\"hljs-string\\\">\\\"button1\\\"</span>/&gt;</span>\\n    <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">Button</span> <span class=\\\"hljs-attr\\\">bind</span>=<span class=\\\"hljs-string\\\">\\\"button2\\\"</span>/&gt;</span>\\n  <span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">Render</span>&gt;</span>\\n</span></code></pre>\\n<p>手动模式下任何子组件都应该是一个已经使用 connect 链接过的 container。\\n无论哪种方式，Render 都支持受控和非受控两种形式。支持受控主要是因为内部实现了一个 fragment\\n机制，即把部分片段封装起来也变成一个金蝉组件，片段中也使用 Render。由于金蝉组件必须是受控组件，\\n所以 Render 必须实现受控模式。受控模式标记属性是 onChange，传入了 onChange 就会让其编程受控态。\\nRender 除了负责提供 context 外，剩下的工作主要是创建扁平树。当然，如果是第二种手动方式，扁平树\\n是用户自己创建的。</p>\\n<h3 id=\\\"can1-shu4-props\\\">参数/props</h3>\\n<h4 id=\\\"statetree-sheng1-ming2-guo4-de-statetree-dui4-xiang4\\\">stateTree - 声明过的 stateTree 对象</h4>\\n<h4 id=\\\"appearance-sheng1-ming2-guo4-de-appearance-dui4-xiang4\\\">appearance - 声明过的 appearance 对象</h4>\\n<h4 id=\\\"background-bao1-han2-liao3-utility-yi3-ji2-job-de-dui4-xiang4-ji2-he2\\\">background - 包含了 utility 以及 job 的对象集合</h4>\\n<h4 id=\\\"config-tong1-guo4-pei4-zhi4-fang1-shi4-xie3-de-zu3-jian4-dui4-xiang4\\\">config - 通过配置方式写的组件对象</h4>\\n<h4 id=\\\"components-jing1-guo4-connect-feng1-zhuang1-hou4-de-zu3-jian4-suo3-you3-zai4-config-dang1-zhong1-shi3-yong4-dao4-de-zu3-jian4-bi4-xu1-zai4-zhe4-li3-ti2-gong1\\\">components - 经过 connect 封装后的组件, 所有在 config 当中使用到的组件必须在这里提供</h4>\\n<h4 id=\\\"didmount-zu3-jian4-jia1-zai3-wan2-bi4-hou4-yun4-hang2-de-fang1-fa3\\\">didMount - 组件加载完毕后运行的\\b方法</h4>\\n<h4 id=\\\"onchange-yong4-lai2-pan4-duan4-dang1-qian2-render-shi4-fou3-shou4-kong4\\\">onChange 用来判断当前 Render 是否受控</h4>\\n<h3 id=\\\"fan3-hui2-zhi2\\\">返回值</h3>\\n<p>Cicada 程序的根节点组件</p>\\n<h3 id=\\\"yong4-fa3\\\">用法</h3>\\n<pre class=\\\"hljs\\\"><code>\\nReactDom.render(\\n  <span class=\\\"xml\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">Render</span>\\n    <span class=\\\"hljs-attr\\\">stateTree</span>=<span class=\\\"hljs-string\\\">{stateTree}</span>\\n    <span class=\\\"hljs-attr\\\">appearance</span>=<span class=\\\"hljs-string\\\">{appearance}</span>\\n    <span class=\\\"hljs-attr\\\">background</span>=<span class=\\\"hljs-string\\\">{createBackground({</span>\\n      <span class=\\\"hljs-attr\\\">utilities:</span> {\\n        <span class=\\\"hljs-attr\\\">listener:</span> <span class=\\\"hljs-attr\\\">listenerBackground</span>,\\n        <span class=\\\"hljs-attr\\\">stateTree:</span> <span class=\\\"hljs-attr\\\">stateTreeBackground</span>,\\n      },\\n    }, <span class=\\\"hljs-attr\\\">stateTree</span>)}\\n  &gt;</span>\\n  <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">Input</span> <span class=\\\"hljs-attr\\\">getInitialState</span>=<span class=\\\"hljs-string\\\">{()</span> =&gt;</span> ({ value: 'input' })}&gt;\\n  <span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">Render</span>&gt;</span>, document.getElementById('root'),\\n</span></code></pre>\\n\"}","sample":"{\"title\":\"sample\",\"description\":\"基础教程\",\"author\":\"imink\",\"group\":\"CORE\",\"index\":[0,999],\"url\":\"sample\",\"toc\":[{\"id\":\"less-than-render-greater-than-this-props-children-less-than-render-greater-than\",\"value\":\"&lt;Render &gt;{this.props.children}&lt;/Render&gt;\"}],\"content\":\"<h2 id=\\\"less-than-render-greater-than-this-props-children-less-than-render-greater-than\\\">&lt;Render &gt;{this.props.children}&lt;/Render&gt;</h2>\\n<h3 id=\\\"can1-shu4-props\\\">参数/props</h3>\\n<h3 id=\\\"fan3-hui2-zhi2\\\">返回值</h3>\\n<h3 id=\\\"yong4-fa3\\\">用法</h3>\\n<pre class=\\\"hljs\\\"><code>\\n</code></pre>\\n\"}","scope":"{\"title\":\"Scope\",\"description\":\"基础教程\",\"author\":\"imink\",\"group\":\"CORE\",\"index\":[0,999],\"url\":\"scope\",\"toc\":[{\"id\":\"scope\",\"value\":\"Scope\"}],\"content\":\"<h2 id=\\\"scope\\\">Scope</h2>\\n<p><Scope /> 组件用来动态生成列表或者表格类型的组件，用户可以通过在重复组件的外层嵌套 <Scope /> 组件，从而避免对每个子组件都写上唯一的 bind。Scope 会对每个同样的子组件自动生成唯一的 statePath，e.g. <code>todoList.items.0.todo, todoList.items.1.todo</code>。</p>\\n<h3 id=\\\"can1-shu4-props\\\">参数/props</h3>\\n<h4 id=\\\"relativechildstatepath-xiang1-dui4-de-statepatheg-itemsindex\\\">relativeChildStatePath - 相对的 statePath，e.g. <code>items.${index}</code></h4>\\n<h4 id=\\\"key-zhong4-fu4-zu3-jian4-de-index\\\">key - 重复组件的 index</h4>\\n<h3 id=\\\"fan3-hui2-zhi2\\\">返回值</h3>\\n<h3 id=\\\"yong4-fa3\\\">用法</h3>\\n<pre class=\\\"hljs\\\"><code>\\n</code></pre>\\n\"}","statetree":"{\"title\":\"stateTree\",\"description\":\"基础教程\",\"author\":\"imink\",\"group\":\"CORE\",\"index\":[0,3],\"url\":\"statetree\",\"toc\":[{\"id\":\"createstatetree-initialstatetree\",\"value\":\"createStateTree(initialStateTree)\"},{\"id\":\"applystatetreesubscriber-statetree\",\"value\":\"applyStateTreeSubscriber(stateTree)\"}],\"content\":\"<h2 id=\\\"createstatetree-initialstatetree\\\">createStateTree(initialStateTree)</h2>\\n<p>用于创建不具备事件订阅的状态树，但是包含了基本的数据操作</p>\\n<h3 id=\\\"can1-shu4-props\\\">参数/props</h3>\\n<ul>\\n<li>initialStateTree - 一个包含状态树初始值的对象</li>\\n</ul>\\n<h3 id=\\\"fan3-hui2-zhi2\\\">返回值</h3>\\n<p>返回一个具有基本数据操作的对象，该对象返回方法有：</p>\\n<h4 id=\\\"get-huo4-qu3-zu3-jian4-zhuang4-tai4\\\">get 获取组件状态</h4>\\n<h4 id=\\\"getbyid-gen1-ju4-stateid-huo4-qu3-zu3-jian4-zhuang4-tai4\\\">getById 根据 stateId 获取组件状态</h4>\\n<h4 id=\\\"getwithdetail-huo4-qu3-bao1-han2-lu4-jing4-xin4-xi1-de-zhuang4-tai4\\\">getWithDetail 获取包含路径信息的状态</h4>\\n<h4 id=\\\"set-she4-zhi4-zhuang4-tai4-yuan2-zi3-cao1-zuo4-hui4-zhi2-jie1-fu4-gai4-yuan2-shu4-ju4\\\">set 设置状态（原子操作，会直接覆盖原数据）</h4>\\n<h4 id=\\\"merge-he2-bing4-zhuang4-tai4-ju2-bu4-cao1-zuo4-geng1-xin1-yi3-you3-de-zhuang4-tai4\\\">merge 合并状态 （\\b局部操作，更新已有的状态）</h4>\\n<h4 id=\\\"reset-zhong4-zhi4-dao4-jie2-dian3-de-chu1-shi3-zhuang4-tai4\\\">reset 重置到节点的初始状态</h4>\\n<h4 id=\\\"resethard-zhong4-zhi4-dao4-zu3-jian4-de-chu1-shi3-zhuang4-tai4\\\">resetHard 重置到组件的初始状态</h4>\\n<blockquote>\\n<p>以下 XXXById 提供给 Utility 和 Job 使用</p>\\n</blockquote>\\n<h4 id=\\\"setbyid\\\">setById</h4>\\n<h4 id=\\\"mergebyid\\\">mergeById</h4>\\n<h4 id=\\\"resetbyid\\\">resetById</h4>\\n<h4 id=\\\"resethardbyid\\\">resetHardById</h4>\\n<h4 id=\\\"defaults-zhu4-ce4-zu3-jian4-de-chu1-shi3-zhi2\\\">defaults 注册组件的初始值</h4>\\n<h4 id=\\\"register-zhu4-ce4-zhuang4-tai4-shu4\\\">register 注册状态树</h4>\\n<h4 id=\\\"gettypebyid-huo4-qu3-zu3-jian4-lei4-xing2\\\">getTypeById: 获取组件类型</h4>\\n<h4 id=\\\"getversion-huo4-qu3-zu3-jian4-ban3-ben3\\\">getVersion: 获取组件版本</h4>\\n<h3 id=\\\"yong4-fa3\\\">用法</h3>\\n<pre><code class=\\\"language-js\\u001b\\b\\\">const <span class=\\\"hljs-keyword\\\">state</span>Tree = createStateTree({{}})\\n</code></pre>\\n<h2 id=\\\"applystatetreesubscriber-statetree\\\">applyStateTreeSubscriber(stateTree)</h2>\\n<p>赋予状态树具备消息订阅的能力, \\b包括 pub 发布和 sub 订阅能力，实现了对组件的精确更新，通过劫持参数 stateTree 的 register 方法，可以精确把组件的 subscriber 和 组件的 stateId 对应起来。</p>\\n<h3 id=\\\"can1-shu4\\\">参数</h3>\\n<h4 id=\\\"statetree-jing1-guo4-createstatetree-sheng1-cheng2-de-zhuang4-tai4-shu4-dui4-xiang4\\\">stateTree 经过 createStateTree 生成的状态树对象</h4>\\n<h3 id=\\\"fan3-hui2-zhi2-2\\\">返回值</h3>\\n<p>返回一个具有事件订阅机制的状态树， 该对象具备以下方法：</p>\\n<h4 id=\\\"origin\\\">origin</h4>\\n<h4 id=\\\"set\\\">set</h4>\\n<h4 id=\\\"merge\\\">merge</h4>\\n<h4 id=\\\"resethard\\\">resetHard</h4>\\n<h4 id=\\\"setbyid-2\\\">setById</h4>\\n<h4 id=\\\"mergebyid-2\\\">mergeById</h4>\\n<h4 id=\\\"resetbyid-2\\\">resetById</h4>\\n<h4 id=\\\"resethardbyid-2\\\">resetHardById</h4>\\n<h4 id=\\\"subscribe\\\">subscribe</h4>\\n<h4 id=\\\"forcesubscribe\\\">forceSubscribe</h4>\\n<h4 id=\\\"subscribebystateid\\\">subscribeByStateId</h4>\\n<h4 id=\\\"cache-biao1-ji4-yun3-xu3-duo1-ci4-gai3-bian4-he2-bing4-cheng2-yi1-ci4-geng1-xin1\\\">cache - 标记允许多次改变合并成一次更新</h4>\\n<h4 id=\\\"flush-qiang2-zhi4-mei3-ci4-geng1-xin1\\\">flush - 强制每次更新</h4>\\n<h3 id=\\\"yong4-fa3-2\\\">用法</h3>\\n<pre class=\\\"hljs\\\"><code><span class=\\\"hljs-keyword\\\">const</span> stateTree = applyStateTreeSubscriber(createStateTree)()\\n</code></pre>\\n\"}","utility":"{\"title\":\"utility\",\"description\":\"基础教程\",\"author\":\"imink\",\"group\":\"HELPER\",\"index\":[2,0],\"url\":\"utility\",\"toc\":[{\"id\":\"mapvalues-obj-handler\",\"value\":\"mapValues(obj, handler)\"}],\"content\":\"<h2 id=\\\"mapvalues-obj-handler\\\">mapValues(obj, handler)</h2>\\n<p>\\b用于轮询处理对象，返回一个经过处理过的新的对象，类似适用于对象的 reduce 方法</p>\\n<h3 id=\\\"can1-shu4-props\\\">参数/props</h3>\\n<h4 id=\\\"obj-xu1-yao4-chu3-li3-de-dui4-xiang4\\\">obj - 需要处理的对象</h4>\\n<h4 id=\\\"handler-chu3-li3-han2-shu4\\\">handler - 处理函数</h4>\\n<p>handler 接受参数为 value, key, 即 obj 的键值对。</p>\\n<h3 id=\\\"fan3-hui2-zhi2\\\">返回值</h3>\\n<p>返回经过处理的新的对象</p>\\n<h3 id=\\\"yong4-fa3\\\">用法</h3>\\n<pre class=\\\"hljs\\\"><code><span class=\\\"hljs-keyword\\\">import</span> { mapValues } <span class=\\\"hljs-keyword\\\">from</span> <span class=\\\"hljs-string\\\">'@cicada/render/lib/util'</span>\\n<span class=\\\"hljs-keyword\\\">const</span> oldObj = {\\n  <span class=\\\"hljs-attr\\\">one</span>: <span class=\\\"hljs-number\\\">1</span>,\\n  <span class=\\\"hljs-attr\\\">two</span>: <span class=\\\"hljs-number\\\">2</span>,\\n  <span class=\\\"hljs-attr\\\">three</span>: <span class=\\\"hljs-number\\\">3</span>\\n}\\n<span class=\\\"hljs-keyword\\\">const</span> newObj = mapValues(oldObj, (value, key) =&gt; { <span class=\\\"hljs-keyword\\\">return</span> value + <span class=\\\"hljs-number\\\">1</span>})\\n\\n</code></pre>\\n\"}"}